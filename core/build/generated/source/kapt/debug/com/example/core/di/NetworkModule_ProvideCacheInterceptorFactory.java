// Generated by Dagger (https://dagger.dev).
package com.example.core.di;

import com.example.core.remote.interceptors.CacheInterceptor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideCacheInterceptorFactory implements Factory<CacheInterceptor> {
  @Override
  public CacheInterceptor get() {
    return provideCacheInterceptor();
  }

  public static NetworkModule_ProvideCacheInterceptorFactory create() {
    return InstanceHolder.INSTANCE;
  }

  public static CacheInterceptor provideCacheInterceptor() {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.provideCacheInterceptor());
  }

  private static final class InstanceHolder {
    private static final NetworkModule_ProvideCacheInterceptorFactory INSTANCE = new NetworkModule_ProvideCacheInterceptorFactory();
  }
}
