// Generated by Dagger (https://dagger.dev).
package com.example.core.di;

import android.content.Context;
import com.example.core.remote.interceptors.CacheInterceptor;
import com.example.core.remote.interceptors.NetworkConnectionInterceptor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideOkHttpFactory implements Factory<OkHttpClient> {
  private final Provider<Context> contextProvider;

  private final Provider<CacheInterceptor> cacheInterceptorProvider;

  private final Provider<HttpLoggingInterceptor> loggingInterceptorProvider;

  private final Provider<NetworkConnectionInterceptor> internetConnectionInterceptorProvider;

  public NetworkModule_ProvideOkHttpFactory(Provider<Context> contextProvider,
      Provider<CacheInterceptor> cacheInterceptorProvider,
      Provider<HttpLoggingInterceptor> loggingInterceptorProvider,
      Provider<NetworkConnectionInterceptor> internetConnectionInterceptorProvider) {
    this.contextProvider = contextProvider;
    this.cacheInterceptorProvider = cacheInterceptorProvider;
    this.loggingInterceptorProvider = loggingInterceptorProvider;
    this.internetConnectionInterceptorProvider = internetConnectionInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttp(contextProvider.get(), cacheInterceptorProvider.get(), loggingInterceptorProvider.get(), internetConnectionInterceptorProvider.get());
  }

  public static NetworkModule_ProvideOkHttpFactory create(Provider<Context> contextProvider,
      Provider<CacheInterceptor> cacheInterceptorProvider,
      Provider<HttpLoggingInterceptor> loggingInterceptorProvider,
      Provider<NetworkConnectionInterceptor> internetConnectionInterceptorProvider) {
    return new NetworkModule_ProvideOkHttpFactory(contextProvider, cacheInterceptorProvider, loggingInterceptorProvider, internetConnectionInterceptorProvider);
  }

  public static OkHttpClient provideOkHttp(Context context, CacheInterceptor cacheInterceptor,
      HttpLoggingInterceptor loggingInterceptor,
      NetworkConnectionInterceptor internetConnectionInterceptor) {
    return Preconditions.checkNotNullFromProvides(NetworkModule.INSTANCE.provideOkHttp(context, cacheInterceptor, loggingInterceptor, internetConnectionInterceptor));
  }
}
