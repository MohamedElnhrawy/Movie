// Generated by Dagger (https://dagger.dev).
package com.example.core.di;

import com.example.core.local.database.MovieDatabase;
import com.example.core.remote.datasource.MovieDataSource;
import com.example.core.repos.home.MovieRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideMovieRepositoryFactory implements Factory<MovieRepository> {
  private final Provider<MovieDataSource> dataSourceProvider;

  private final Provider<MovieDatabase> movieDatabaseProvider;

  public RepositoryModule_ProvideMovieRepositoryFactory(
      Provider<MovieDataSource> dataSourceProvider, Provider<MovieDatabase> movieDatabaseProvider) {
    this.dataSourceProvider = dataSourceProvider;
    this.movieDatabaseProvider = movieDatabaseProvider;
  }

  @Override
  public MovieRepository get() {
    return provideMovieRepository(dataSourceProvider.get(), movieDatabaseProvider.get());
  }

  public static RepositoryModule_ProvideMovieRepositoryFactory create(
      Provider<MovieDataSource> dataSourceProvider, Provider<MovieDatabase> movieDatabaseProvider) {
    return new RepositoryModule_ProvideMovieRepositoryFactory(dataSourceProvider, movieDatabaseProvider);
  }

  public static MovieRepository provideMovieRepository(MovieDataSource dataSource,
      MovieDatabase movieDatabase) {
    return Preconditions.checkNotNullFromProvides(RepositoryModule.INSTANCE.provideMovieRepository(dataSource, movieDatabase));
  }
}
