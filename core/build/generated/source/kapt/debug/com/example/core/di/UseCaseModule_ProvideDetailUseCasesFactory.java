// Generated by Dagger (https://dagger.dev).
package com.example.core.di;

import com.example.core.repos.details.DetailMovieRepository;
import com.example.core.usecase.details.DetailUseCases;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UseCaseModule_ProvideDetailUseCasesFactory implements Factory<DetailUseCases> {
  private final Provider<DetailMovieRepository> detailMovieRepositoryProvider;

  public UseCaseModule_ProvideDetailUseCasesFactory(
      Provider<DetailMovieRepository> detailMovieRepositoryProvider) {
    this.detailMovieRepositoryProvider = detailMovieRepositoryProvider;
  }

  @Override
  public DetailUseCases get() {
    return provideDetailUseCases(detailMovieRepositoryProvider.get());
  }

  public static UseCaseModule_ProvideDetailUseCasesFactory create(
      Provider<DetailMovieRepository> detailMovieRepositoryProvider) {
    return new UseCaseModule_ProvideDetailUseCasesFactory(detailMovieRepositoryProvider);
  }

  public static DetailUseCases provideDetailUseCases(DetailMovieRepository detailMovieRepository) {
    return Preconditions.checkNotNullFromProvides(UseCaseModule.INSTANCE.provideDetailUseCases(detailMovieRepository));
  }
}
