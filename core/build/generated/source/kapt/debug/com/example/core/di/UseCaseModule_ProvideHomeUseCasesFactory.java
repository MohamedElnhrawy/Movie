// Generated by Dagger (https://dagger.dev).
package com.example.core.di;

import com.example.core.repos.home.MovieRepository;
import com.example.core.usecase.home.HomeUseCases;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UseCaseModule_ProvideHomeUseCasesFactory implements Factory<HomeUseCases> {
  private final Provider<MovieRepository> movieRepositoryProvider;

  public UseCaseModule_ProvideHomeUseCasesFactory(
      Provider<MovieRepository> movieRepositoryProvider) {
    this.movieRepositoryProvider = movieRepositoryProvider;
  }

  @Override
  public HomeUseCases get() {
    return provideHomeUseCases(movieRepositoryProvider.get());
  }

  public static UseCaseModule_ProvideHomeUseCasesFactory create(
      Provider<MovieRepository> movieRepositoryProvider) {
    return new UseCaseModule_ProvideHomeUseCasesFactory(movieRepositoryProvider);
  }

  public static HomeUseCases provideHomeUseCases(MovieRepository movieRepository) {
    return Preconditions.checkNotNullFromProvides(UseCaseModule.INSTANCE.provideHomeUseCases(movieRepository));
  }
}
