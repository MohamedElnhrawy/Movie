// Generated by Dagger (https://dagger.dev).
package com.example.detail;

import androidx.lifecycle.SavedStateHandle;
import com.example.core.usecase.details.DetailUseCases;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DetailViewModel_Factory implements Factory<DetailViewModel> {
  private final Provider<DetailUseCases> useCasesProvider;

  private final Provider<SavedStateHandle> savedStateHandleProvider;

  public DetailViewModel_Factory(Provider<DetailUseCases> useCasesProvider,
      Provider<SavedStateHandle> savedStateHandleProvider) {
    this.useCasesProvider = useCasesProvider;
    this.savedStateHandleProvider = savedStateHandleProvider;
  }

  @Override
  public DetailViewModel get() {
    return newInstance(useCasesProvider.get(), savedStateHandleProvider.get());
  }

  public static DetailViewModel_Factory create(Provider<DetailUseCases> useCasesProvider,
      Provider<SavedStateHandle> savedStateHandleProvider) {
    return new DetailViewModel_Factory(useCasesProvider, savedStateHandleProvider);
  }

  public static DetailViewModel newInstance(DetailUseCases useCases,
      SavedStateHandle savedStateHandle) {
    return new DetailViewModel(useCases, savedStateHandle);
  }
}
